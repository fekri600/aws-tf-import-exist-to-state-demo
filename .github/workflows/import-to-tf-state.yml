name: Apply or import existing resources to tf state

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action: apply / import / destroy"
        required: true
        default: "apply"
        type: choice
        options: [apply, import, destroy]
      aws_region:
        description: "AWS region"
        required: true
        default: "us-east-1"
      tf_version:
        description: "Terraform version (must exist in releases)"
        required: true
        default: "1.12.2" # change if unavailable
  pull_request:
    types: [closed]  # run import only after PR is merged

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: terraform-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  AWS_DEFAULT_REGION: "us-east-1"   # used by merge job
  TF_VERSION: "1.12.2"              # used by merge job

jobs:

  # ------------------------------------
  # A) APPLY or DESTROY from repo root
  # ------------------------------------
  apply_or_destroy:
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Show submodule status
        run: |
          git submodule status || true
          ls -la state-sync-tools || true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ github.event.inputs.tf_version }}

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Fmt (check)
        run: terraform fmt -recursive -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform plan -out=tfplan.bin

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve tfplan.bin

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve


  # ---------------------------------------------------------
  # B) IMPORT DISCOVERY â†’ PR (generate + patch + open a PR)
  # ---------------------------------------------------------
  explore_existing_resources:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'import' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full, with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Show submodule status
        run: |
          git submodule status || true
          ls -la state-sync-tools || true
          ls -la state-sync-tools/inventory || true
          ls -la state-sync-tools/gen-import || true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ github.event.inputs.tf_version }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Preflight: guard rails
      - name: Verify repo layout
        run: |
          set -euxo pipefail
          test -d state-sync-tools/inventory || (echo "Missing state-sync-tools/inventory (submodule?)." && exit 1)
          test -d state-sync-tools/gen-import || (echo "Missing state-sync-tools/gen-import (submodule?)." && exit 1)

      - name: Explore inventory (make explore)
        run: |
          set -euxo pipefail
          make -C state-sync-tools/inventory explore
          test -s state-sync-tools/inventory/inventory.json

      - name: Generate import files (blocks + cli)
        run: |
          set -euxo pipefail
          python3 state-sync-tools/gen-import/gen-existing-tf-blocks.py
          test -f state-sync-tools/to-import/blocks-to-import.tf
          test -f state-sync-tools/to-import/cli-import.sh
          chmod +x state-sync-tools/to-import/cli-import.sh

      - name: Patch main.tf to include import module (idempotent)
        run: |
          set -euo pipefail
          if ! grep -q 'module "imported"' main.tf; then
            cat >> main.tf <<'HCL'

                 module "imported" {
                     source = "./state-sync-tools/to-import"
                }
                HCL
          fi
          terraform fmt -recursive

      - name: Create Pull Request (generated files + main.tf patch)
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(import): add generated to-import files and module hook in main.tf"
          title: "Import existing AWS resources into Terraform state"
          body: |
            This PR adds auto-generated import artifacts and wires them into root:
            - `state-sync-tools/to-import/blocks-to-import.tf`
            - `state-sync-tools/to-import/cli-import.sh`
            - Appended `module "imported" { source = "./state-sync-tools/to-import" }` to `main.tf` (idempotent)

            After merge, CI will run `state-sync-tools/to-import/cli-import.sh` to import resources into Terraform state.
          branch: "import/generated-${{ github.run_id }}"
          labels: "import, terraform"
          add-paths: |
            state-sync-tools/to-import/**
            main.tf


  # ----------------------------------------------------
  # C) EXECUTE IMPORT only after the PR is actually merged
  # ----------------------------------------------------
  import_existing_resources:
    if: ${{ github.event_name == 'pull_request'
            && github.event.action == 'closed'
            && github.event.pull_request.merged == true
            && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merged commit (with submodules)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
          submodules: recursive

      - name: Show submodule status
        run: |
          git submodule status || true
          ls -la state-sync-tools || true
          ls -la state-sync-tools/to-import || true

      - name: Ensure import artifacts exist
        id: chk
        run: |
          if [ -f state-sync-tools/to-import/cli-import.sh ]; then
            echo "do_import=true" >> "$GITHUB_OUTPUT"
          else
            echo "No import script found in merged commit; skipping." >&2
            echo "do_import=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS Credentials
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        run: terraform init -upgrade

      - name: Run import script (cli-import.sh)
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        run: |
          bash -xe state-sync-tools/to-import/cli-import.sh

      - name: Refresh state only
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        run: terraform plan -refresh-only -no-color

      - name: Show diff after import (non-blocking)
        if: ${{ steps.chk.outputs.do_import == 'true' }}
        run: terraform plan -no-color || true
